#+TITLE: Testbeds Directory

* Overview

Testbeds are standardized codebases designed for reproducible experiments with LLM agents. Each testbed provides a consistent environment for testing methods against various challenges.

* Available Testbeds

** web-app/
A typical web application with:
- Frontend (React/Vue/etc)
- Backend API
- Database layer
- Authentication
- Common web app patterns

** cli-tool/
Command-line application with:
- Argument parsing
- File operations
- Configuration management
- Plugin system
- Testing infrastructure

** data-pipeline/
Data processing system with:
- ETL operations
- Data validation
- Transformation logic
- Error handling
- Performance considerations

** api-service/
RESTful API service with:
- Multiple endpoints
- Authentication/authorization
- Data models
- Integration tests
- Documentation

** documentation-site/
Documentation project with:
- Multiple pages
- Navigation structure
- Code examples
- Search functionality
- Build system

* Testbed Requirements

** Self-Contained
- Minimal external dependencies
- Clear setup instructions
- Works offline
- Version controlled

** Resetable
- Script to reset to initial state
- Clear documentation of states
- No persistent side effects

** Measurable
- Built-in test suite
- Performance benchmarks
- Clear success criteria
- Automated verification

** Realistic
- Real-world patterns
- Common challenges
- Practical use cases
- Industry standards

* Testbed Structure

#+begin_src
testbed-name/
├── README.org          # Overview and setup
├── reset.sh           # Reset to initial state
├── verify.sh          # Verify current state
├── setup.sh           # Initial setup if needed
├── challenges/        # Specific tasks for this testbed
│   ├── easy/
│   ├── medium/
│   └── hard/
├── src/              # Source code
├── tests/            # Test suite
├── docs/             # Documentation
└── .claude/          # Claude-specific config
    └── CLAUDE.md     # Instructions for Claude
#+end_src

* Using Testbeds

** Setup
#+begin_src bash
cd testbeds/web-app
./setup.sh  # If first time
./reset.sh  # Reset to known state
#+end_src

** Running Experiments
1. Choose appropriate testbed
2. Reset to initial state
3. Select challenge from testbed
4. Apply method being tested
5. Verify results
6. Record in experiment log

** Creating Challenges
Each testbed can have specific challenges:
- Easy: Single file, clear requirements
- Medium: Multiple files, some complexity
- Hard: Architectural changes, complex requirements

* Contributing a Testbed

** Requirements
1. Realistic but focused scope
2. Clear documentation
3. Automated setup/reset
4. At least 5 challenges
5. Verification scripts

** Process
1. Propose via issue
2. Create in feature branch
3. Document thoroughly
4. Add challenges
5. Submit PR

** Maintenance
- Keep dependencies updated
- Fix broken tests
- Add new challenges
- Improve documentation

* Best Practices

** For Experiments
- Always reset before starting
- Use same testbed for comparisons
- Document any modifications
- Don't commit experiment changes

** For Development
- Keep testbeds simple
- Focus on specific aspects
- Provide good defaults
- Make verification automated

See [[../docs/best-practices.org][Best Practices]] for more guidance.