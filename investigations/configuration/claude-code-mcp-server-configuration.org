#+TITLE: Claude Code MCP Server Configuration Options
#+DATE: 2025-07-19

* Overview

This document details all available configuration options for MCP (Model Context Protocol) servers in Claude Code, based on analysis of the source code.

* MCP Server Configuration Structure

** Transport Types

Claude Code supports four transport types for MCP servers:
- =stdio= - Standard input/output (default for local servers)
- =sse= - Server-Sent Events
- =sse-ide= - SSE variant for IDE integrations
- =http= - HTTP transport

** Configuration Schema

*** stdio Transport (Most Common)
#+begin_src json
{
  "server-name": {
    "type": "stdio",      // Optional, defaults to stdio
    "command": "string",  // Required, min 1 character
    "args": ["array"],    // Optional, defaults to []
    "env": {              // Optional
      "KEY": "value"
    }
  }
}
#+end_src

*** SSE Transport
#+begin_src json
{
  "server-name": {
    "type": "sse",
    "url": "https://example.com/sse",
    "apiKey": "optional-api-key",
    "headers": {          // Optional custom headers
      "Authorization": "Bearer token"
    }
  }
}
#+end_src

*** HTTP Transport
#+begin_src json
{
  "server-name": {
    "type": "http",
    "url": "https://example.com/api"
  }
}
#+end_src

* Important: No CWD Support

**Claude Code MCP server configuration does NOT support a =cwd= (current working directory) parameter.**

MCP servers inherit the working directory from Claude Code itself, which is typically the project root where Claude Code was launched.

* Available Configuration Parameters

** For stdio Transport

| Parameter | Type | Required | Description |
|-----------+------+----------+-------------|
| =type= | string | No | Transport type, defaults to "stdio" |
| =command= | string | Yes | Executable command (e.g., "npx", "python", "node") |
| =args= | string[] | No | Array of command arguments |
| =env= | object | No | Environment variables as key-value pairs |

** For SSE Transport

| Parameter | Type | Required | Description |
|-----------+------+----------+-------------|
| =type= | string | Yes | Must be "sse" or "sse-ide" |
| =url= | string | Yes | SSE endpoint URL |
| =apiKey= | string | No | API key for authentication |
| =headers= | object | No | Custom HTTP headers |

** For HTTP Transport

| Parameter | Type | Required | Description |
|-----------+------+----------+-------------|
| =type= | string | Yes | Must be "http" |
| =url= | string | Yes | HTTP endpoint URL |

* Working Directory Workarounds

Since =cwd= is not supported, here are workarounds for servers that need specific directories:

** 1. Use Absolute Paths
#+begin_src json
{
  "filesystem": {
    "command": "npx",
    "args": ["@modelcontextprotocol/server-filesystem", "/absolute/path/to/directory"]
  }
}
#+end_src

** 2. Use Environment Variables
#+begin_src json
{
  "my-server": {
    "command": "python",
    "args": ["-m", "my_server"],
    "env": {
      "WORKING_DIR": "/path/to/specific/directory",
      "PROJECT_ROOT": "/home/user/project"
    }
  }
}
#+end_src

** 3. Wrapper Scripts
Create a wrapper script that changes directory:
#+begin_src bash
#!/bin/bash
cd /desired/directory
exec python -m my_mcp_server "$@"
#+end_src

Then reference the wrapper:
#+begin_src json
{
  "my-server": {
    "command": "/path/to/wrapper.sh"
  }
}
#+end_src

** 4. Server Implementation
Handle directory changes within your MCP server code:
#+begin_src python
import os
import sys

# Change to specific directory on startup
os.chdir(os.environ.get('MCP_WORKING_DIR', '/default/path'))
#+end_src

* Configuration Examples

** Basic npm Package
#+begin_src json
{
  "filesystem": {
    "command": "npx",
    "args": ["-y", "@modelcontextprotocol/server-filesystem", "/home/user/documents"]
  }
}
#+end_src

** Python Server with Environment
#+begin_src json
{
  "python-analyzer": {
    "command": "python",
    "args": ["-m", "mcp_code_analyzer", "--verbose"],
    "env": {
      "PYTHONPATH": "/home/user/mcp-servers",
      "ANALYSIS_CACHE": "/tmp/analysis-cache"
    }
  }
}
#+end_src

** Multiple Servers
#+begin_src json
{
  "filesystem": {
    "command": "npx",
    "args": ["-y", "@modelcontextprotocol/server-filesystem", "."]
  },
  "git": {
    "command": "uvx",
    "args": ["mcp-server-git", "--repository", "."]
  },
  "memory": {
    "command": "npx",
    "args": ["-y", "@modelcontextprotocol/server-memory"]
  }
}
#+end_src

** Windows-Specific Configuration
For Windows, npx commands need special handling:
#+begin_src json
{
  "filesystem": {
    "command": "cmd",
    "args": ["/c", "npx", "-y", "@modelcontextprotocol/server-filesystem", "C:\\Users\\me\\Documents"]
  }
}
#+end_src

* Environment Variable Expansion

Claude Code supports environment variable expansion in MCP configurations:
- Variables can be referenced in args and env values
- Syntax depends on the implementation (typically =$VAR= or =${VAR}=)
- Missing variables may cause server startup failures

* Configuration File Locations

MCP servers can be configured in multiple locations:

1. **.mcp.json** (Project root)
   - Shared with team via version control
   - Project-wide server definitions

2. **User Settings** (~/.claude/settings.json)
   - Personal servers available in all projects
   - Not shared with team

3. **Local Settings** (.claude/settings.local.json)
   - Project-specific personal servers
   - Git-ignored by default

* Server Management Commands

| Command | Description |
|---------+-------------|
| =claude mcp list= | List all configured MCP servers |
| =claude mcp add= | Add a new MCP server |
| =claude mcp remove <name>= | Remove an MCP server |
| =claude mcp logs <name>= | View server logs |

* Validation and Error Handling

** Common Validation Errors
1. **Missing command**: "Missing required 'command' field"
2. **Invalid transport**: "Invalid transport type. Expected one of: stdio, sse, sse-ide, http"
3. **Windows npx**: "Windows requires 'cmd /c' wrapper to execute npx"
4. **Missing environment variables**: Server references undefined variables

** Server Startup
- Servers are started when Claude Code launches
- Failed servers show errors but don't prevent Claude Code from running
- Use =--mcp-debug= flag for detailed error messages

* Best Practices

1. **Use Descriptive Names**: Name servers based on their function
2. **Document Environment Variables**: Comment what each env var does
3. **Test Configurations**: Verify servers start correctly before committing
4. **Handle Paths Carefully**: Use absolute paths or environment variables
5. **Windows Compatibility**: Test configurations on Windows if sharing

* Limitations

1. **No CWD Parameter**: Cannot specify working directory per server
2. **No Restart Control**: Servers restart with Claude Code
3. **Limited Process Control**: No fine-grained process management
4. **Inherited Environment**: Servers inherit Claude Code's environment

* Future Considerations

Based on the current implementation, potential future enhancements could include:
- =cwd= parameter for stdio transport
- Server restart commands
- Health check configurations
- Resource limit controls

However, these are not currently available in the analyzed version.