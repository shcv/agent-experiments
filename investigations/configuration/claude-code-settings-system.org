#+TITLE: Claude Code Settings and Configuration System
#+DATE: 2025-07-19

* Overview

Claude Code uses a sophisticated multi-layered configuration system with several types of configuration files. This document provides a comprehensive reference for understanding how settings work, where they're stored, and how they're merged.

* Configuration Files Overview

** Primary Configuration Files
| File | Location | Purpose | Tracked in Git |
|------+----------+---------+-----------------|
| =.claude.json= | =~/.claude/.claude.json= | Global user config (all projects) | N/A |
| =settings.json= | =~/.claude/settings.json= | Global user settings | N/A |
| =settings.json= | =.claude/settings.json= | Project-specific settings | Yes |
| =settings.local.json= | =.claude/settings.local.json= | Local project overrides | No (gitignored) |
| =.mcp.json= | =./.mcp.json= | MCP server definitions | Yes |
| =managed-settings.json= | System location | Policy/enterprise settings | N/A |

** Legacy/Alternative Names
- =.config.json= - Alternative name for =.claude.json= (checked first if exists)
- Both files serve the same purpose; Claude Code prefers =.config.json= if it exists

* Settings Hierarchy and Precedence

Settings are loaded and merged in the following order (later overrides earlier):

1. **User Settings** (=~/.claude/settings.json=)
   - Global user preferences
   - Applies to all projects
   
2. **Project Settings** (=.claude/settings.json=)
   - Project-specific configuration
   - Committed to version control
   - Shared with team members
   
3. **Local Settings** (=.claude/settings.local.json=)
   - Personal project overrides
   - Git-ignored by default
   - For individual developer preferences
   
4. **Policy Settings** (system-wide)
   - Managed/enterprise settings
   - Cannot be overridden by users
   - Location varies by OS (see below)

* File Locations

** User Configuration Directory
The base directory for user configuration is determined by:
#+begin_src 
$CLAUDE_CONFIG_DIR || ~/.claude
#+end_src

If =CLAUDE_CONFIG_DIR= is set, it takes precedence over the default =~/.claude= location.

** Policy Settings Locations
System-wide managed settings locations by platform:
- **macOS**: =/Library/Application Support/ClaudeCode/managed-settings.json=
- **Linux**: =/etc/claude-code/managed-settings.json=
- **Windows**: =C:\ProgramData\ClaudeCode\managed-settings.json=

** XDG Base Directory Support
⚠️ **Limited Support**: Claude Code does NOT follow XDG Base Directory specification for its own configuration. The =XDG_CONFIG_HOME= environment variable is only used for detecting other applications (like ghostty terminal).

* Configuration File Formats

** Global Configuration (.claude.json)
Stores project-specific settings indexed by project path:
#+begin_src json
{
  "/path/to/project1": {
    "model": "claude-4-opus",
    "customInstructions": "Always use TypeScript",
    "mcpServers": {
      "filesystem": {
        "command": "mcp-filesystem"
      }
    }
  },
  "/path/to/project2": {
    "model": "claude-3.5-sonnet",
    "enabledTools": ["Write", "Edit"]
  }
}
#+end_src

** Settings Files (settings.json)
Uses a rule-based system for permissions and configuration:
#+begin_src json
{
  "rules": [
    {
      "ruleType": "tool",
      "toolName": "Write",
      "paths": {
        "allow": ["src/**/*.js", "tests/**/*.js"],
        "deny": ["node_modules/**", ".env"]
      }
    },
    {
      "ruleType": "tool",
      "toolName": "Bash",
      "commands": {
        "allow": ["npm test", "npm run build"],
        "deny": ["rm -rf", "sudo *"]
      }
    }
  ],
  "toolAutoApprovals": {
    "Bash": ["npm test", "npm run lint"],
    "Write": ["src/**/*.js"]
  }
}
#+end_src

** MCP Configuration (.mcp.json)
Defines Model Context Protocol servers for the project:
#+begin_src json
{
  "filesystem": {
    "command": "npx",
    "args": ["@modelcontextprotocol/server-filesystem"],
    "env": {
      "PATHS": "/Users/me/Documents"
    }
  },
  "github": {
    "command": "mcp-github",
    "args": ["--repo", "owner/repo"]
  }
}
#+end_src

* Settings Merging Strategy

** Merge Order
Settings are merged in the order defined by the =yV= array:
#+begin_src javascript
["userSettings", "projectSettings", "localSettings", "policySettings"]
#+end_src

** Merge Rules
1. **Objects**: Deep merged, with later values overriding earlier ones
2. **Arrays**: Concatenated and deduplicated
3. **Primitives**: Later values override earlier ones
4. **Policy Settings**: Always win and cannot be overridden

** Cache Management
- Merged settings are cached for performance
- Cache is invalidated when any settings file is modified
- The =E11= variable holds the cached merged result

* Key Functions and Implementation

** Core Functions
| Function | Purpose |
|----------+---------|
| =s9()= | Returns config directory path |
| =OG()= | Returns global config file path |
| =KL(type)= | Returns path for a specific settings file |
| =$Z(type)= | Loads settings from a file |
| =j5(type, data)= | Saves settings to a file |
| =Es9()= | Merges all settings files |
| =WA()= | Loads global user configuration |
| =F9()= | Gets current project's config |
| =p4(config)= | Saves current project's config |

** Settings Type Mapping
The =lY1()= function maps settings types to their base directories:
- =userSettings= → User config directory
- =projectSettings= → Current project root
- =localSettings= → Current project root  
- =policySettings= → System directory (varies by OS)

* Common Use Cases

** Personal Preferences (User Settings)
Place in =~/.claude/settings.json= for preferences across all projects:
#+begin_src json
{
  "rules": [
    {
      "ruleType": "tool",
      "toolName": "Bash",
      "commands": {
        "deny": ["sudo *", "rm -rf /"]
      }
    }
  ]
}
#+end_src

** Team Standards (Project Settings)
Place in =.claude/settings.json= and commit to Git:
#+begin_src json
{
  "rules": [
    {
      "ruleType": "tool",
      "toolName": "Write",
      "paths": {
        "allow": ["src/**", "tests/**"],
        "deny": [".env", "secrets/**"]
      }
    }
  ],
  "customInstructions": "Follow our team's TypeScript style guide"
}
#+end_src

** Local Overrides (Local Settings)
Place in =.claude/settings.local.json= for personal project overrides:
#+begin_src json
{
  "rules": [
    {
      "ruleType": "tool", 
      "toolName": "Bash",
      "commands": {
        "allow": ["npm run dev:local"]
      }
    }
  ]
}
#+end_src

* Migration from Legacy Configuration

Claude Code is migrating from storing certain settings in the global config to using settings.json files. When using deprecated config commands, you'll see warnings like:

#+begin_example
Warning: "claude config add allowedTools" has been migrated to settings.json
Instead, add rules to .claude/settings.json
#+end_example

The system automatically migrates legacy settings to the new format when detected.

* Enterprise/Policy Settings

Policy settings provide centralized control for organizations:
- Cannot be overridden by users
- Useful for enforcing security policies
- Can restrict tool usage, file access, and commands
- Requires system administrator access to modify

Example policy settings:
#+begin_src json
{
  "rules": [
    {
      "ruleType": "tool",
      "toolName": "Bash", 
      "commands": {
        "deny": ["*"]
      }
    },
    {
      "ruleType": "tool",
      "toolName": "Write",
      "paths": {
        "deny": ["/etc/**", "/usr/**", "/System/**"]
      }
    }
  ]
}
#+end_src

* Important Notes

1. **No XDG Support**: Claude Code doesn't follow XDG Base Directory specification. Use =CLAUDE_CONFIG_DIR= to customize the config location.

2. **Git Integration**: 
   - =settings.json= files are meant to be committed
   - =settings.local.json= should be in =.gitignore=
   - =.mcp.json= is typically committed for team sharing

3. **Settings vs Config**: 
   - "Settings" refers to the rule-based permission system
   - "Config" refers to project-specific options like model selection

4. **Cache Behavior**: Settings are cached in memory and only reloaded when files change

5. **Priority**: Policy settings always win, followed by local, project, then user settings