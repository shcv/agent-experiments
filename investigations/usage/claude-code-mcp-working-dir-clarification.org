#+TITLE: MCP Server Working Directory and WORKING_DIR Clarification
#+DATE: 2025-07-19

* Important Clarification

**WORKING_DIR is NOT a special environment variable in Claude Code or MCP servers.**

In the previous documentation, I used =WORKING_DIR= as an example of how you might pass directory information to your MCP server. This was just an illustrative example - there is no special handling of this variable.

* How MCP Servers Actually Handle Working Directories

** Current Behavior (v1.0.56-1.0.58)
Based on source code analysis, MCP stdio servers:
1. **Do NOT have a =cwd= parameter** in their configuration schema
2. **Inherit the working directory** from Claude Code (typically project root)
3. **Cannot change their working directory** via configuration

** Environment Variables in MCP
When an MCP server is spawned:
1. It receives a filtered subset of system environment variables
2. Plus any custom variables defined in the =env= configuration
3. These are standard environment variables with no special handling

** What Actually Gets Passed
MCP servers receive these base environment variables:
- **Windows**: =PATH=, =APPDATA=, =USERPROFILE=, =TEMP=, etc.
- **Unix/macOS**: =PATH=, =HOME=, =USER=, =SHELL=, =TERM=, etc.
- **Custom**: Any variables you define in the =env= config

* Correct Examples

** Example 1: Passing Directory Information (Custom Convention)
#+begin_src json
{
  "my-server": {
    "command": "python",
    "args": ["-m", "my_mcp_server"],
    "env": {
      "MY_CUSTOM_DIR": "/path/to/directory"
    }
  }
}
#+end_src

Your Python server would need to read this:
#+begin_src python
import os
# This is YOUR convention, not MCP's
custom_dir = os.environ.get('MY_CUSTOM_DIR', '.')
#+end_src

** Example 2: Using Standard Python Environment Variables
#+begin_src json
{
  "python-server": {
    "command": "python",
    "args": ["server.py"],
    "env": {
      "PYTHONPATH": "/custom/module/path"
    }
  }
}
#+end_src

This works because Python itself recognizes =PYTHONPATH=.

** Example 3: Wrapper Script Approach
Since you can't set =cwd= in config, use a wrapper:

=run-in-dir.sh=:
#+begin_src bash
#!/bin/bash
cd "$1"
shift
exec "$@"
#+end_src

MCP config:
#+begin_src json
{
  "my-server": {
    "command": "./run-in-dir.sh",
    "args": ["/desired/directory", "python", "-m", "my_server"]
  }
}
#+end_src

* What Works vs What Doesn't

** What WORKS
- ✓ Passing custom environment variables via =env=
- ✓ Your server reading those variables and acting on them
- ✓ Using wrapper scripts to change directory
- ✓ Using absolute paths in arguments

** What DOESN'T Work
- ✗ Setting =cwd= in MCP server config (not supported)
- ✗ Special handling of =WORKING_DIR= (doesn't exist)
- ✗ Automatic directory changes based on env vars

* Best Practices

1. **Don't assume =WORKING_DIR= has special meaning** - it doesn't
2. **Use descriptive variable names** for your custom conventions
3. **Document your environment variables** so others know what they do
4. **Consider wrapper scripts** for complex directory requirements
5. **Use absolute paths** when possible to avoid ambiguity

* The Reality

MCP servers in Claude Code:
- Run in Claude Code's working directory (usually project root)
- Can receive custom environment variables
- Must handle directory changes themselves if needed
- Have no built-in working directory configuration

Any directory handling must be implemented in your MCP server code or through wrapper scripts.