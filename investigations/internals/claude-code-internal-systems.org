#+TITLE: Claude Code Internal Systems Documentation
#+DATE: 2025-07-19

* Overview

This document consolidates research findings about Claude Code's internal systems, including telemetry, configuration, caching, and other architectural components.

* Telemetry and Analytics System

** Architecture
- *Provider*: Statsig (feature flag and experimentation platform)
- *Endpoint*: =https://statsig.anthropic.com/v1/=
- *SDK*: StatsigClient with custom configuration
- *Privacy*: Respects multiple environment variables for opt-out

** Spinner Words Feature
*** Default Words (88 total)
The spinner displays action verbs during operations. The hardcoded list includes whimsical choices like "Flibbertigibbeting", "Combobulating", "Wizarding", etc.

*** Dynamic Words
- Fetched via =getDynamicConfig("tengu_spinner_words")=
- Up to 10 additional words can be added from telemetry
- Combined with default words for random selection

*** Selection Algorithm
- Pure random selection using =Math.random()=
- No context awareness or heuristics
- Memoized for 1 second to prevent flickering
- Each word has equal probability of being selected

** Privacy Controls
Telemetry is disabled when ANY of these are set:
- =DISABLE_TELEMETRY=true=
- =CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC=true=
- =CLAUDE_CODE_USE_BEDROCK=true= (AWS Bedrock mode)
- =CLAUDE_CODE_USE_VERTEX=true= (Google Vertex mode)

** Telemetry Events (prefix: "tengu_")
Common events include:
- =tengu_spinner_words= - Custom spinner words configuration
- =tengu_startup_telemetry= - Startup metrics and environment
- =tengu_config_*= - Configuration changes
- =tengu_mcp_*= - MCP server interactions
- =tengu_oauth_*= - OAuth flow tracking
- =tengu_refusal_*= - Content policy violations

* Caching System

** Implementation
Claude Code uses a sophisticated 5-minute cache with lazy refresh pattern:

#+begin_src javascript
function createCache(fn, timeout = 300000) { // 5 minutes
  let cache = new Map();
  
  return (...args) => {
    let key = JSON.stringify(args);
    let cached = cache.get(key);
    let now = Date.now();
    
    // Lazy refresh: return stale data immediately while refreshing
    if (cached && now - cached.timestamp > timeout && !cached.refreshing) {
      cached.refreshing = true;
      Promise.resolve().then(() => {
        let value = fn(...args);
        cache.set(key, { value, timestamp: Date.now(), refreshing: false });
      });
      return cached.value; // Return stale data immediately
    }
    
    // Normal cache logic
    if (!cached) {
      cache.set(key, { value: fn(...args), timestamp: now, refreshing: false });
    }
    return cache.get(key).value;
  };
}
#+end_src

** Cached Items
- CLAUDE.md file contents
- Git status information
- Directory structure
- System context data

** Key Insight
The lazy refresh pattern explains why CLAUDE.md changes can appear to take effect immediately - the cache returns stale data while updating in the background, and the next request gets fresh data.

* CLAUDE.md System

** File Hierarchy (loaded in order)
1. =CLAUDE.local.md= - Directory-specific instructions (highest priority)
2. =CLAUDE.md= - Project-wide instructions
3. =~/.claude/CLAUDE.md= - User global instructions (lowest priority)

** System Prompt Integration
#+begin_src
"Codebase and user instructions are shown below. Be sure to adhere to these 
instructions. IMPORTANT: These instructions OVERRIDE any default behavior and 
you MUST follow them exactly as written."
#+end_src

** Loading Function
The =hr= function traverses from current directory to root, collecting all CLAUDE.md files:
- Checks for =CLAUDE.local.md= first
- Then =CLAUDE.md= in each directory
- Finally checks user's home directory =~/.claude/CLAUDE.md=
- Returns array of all found files with type labels

** Permission Handling
- Detects EACCES errors when reading CLAUDE.md
- Sends telemetry event =tengu_claude_md_permission_error=
- Continues operation without the inaccessible file

* Environment Variables System

** Categories

*** Authentication & API
Primary variables:
- =ANTHROPIC_API_KEY= - Direct API access
- =ANTHROPIC_AUTH_TOKEN= - Claude.ai session token (higher priority)
- =ANTHROPIC_BASE_URL= - API endpoint override
- =ANTHROPIC_CUSTOM_HEADERS= - Additional HTTP headers

Authentication priority:
1. =ANTHROPIC_AUTH_TOKEN= (highest)
2. API Key Helper
3. =ANTHROPIC_API_KEY=
4. Claude.ai authentication (lowest)

*** Cloud Providers
**** AWS Bedrock
- =CLAUDE_CODE_USE_BEDROCK=true= - Enable Bedrock mode
- =AWS_REGION= / =AWS_DEFAULT_REGION= - AWS region
- =AWS_ACCESS_KEY_ID=, =AWS_SECRET_ACCESS_KEY=, =AWS_SESSION_TOKEN=
- =CLAUDE_CODE_SKIP_BEDROCK_AUTH= - Skip auth for testing

**** Google Vertex AI
- =CLAUDE_CODE_USE_VERTEX=true= - Enable Vertex mode
- =CLOUD_ML_REGION= - Default region (us-east5)
- =ANTHROPIC_VERTEX_PROJECT_ID= - GCP project ID
- =VERTEX_REGION_CLAUDE_*= - Model-specific regions

*** Model Configuration
- =ANTHROPIC_MODEL= - Override default model
- =ANTHROPIC_SMALL_FAST_MODEL= - Fast operations model
- =ANTHROPIC_BETAS= - Comma-separated beta features
- =MAX_THINKING_TOKENS= - Reasoning token limit

*** Feature Controls
- =DISABLE_PROMPT_CACHING= - Disable cost optimization
- =DISABLE_INTERLEAVED_THINKING= - Disable thinking features
- =DISABLE_NON_ESSENTIAL_MODEL_CALLS= - Reduce API usage
- =CLAUDE_CODE_ENABLE_UNIFIED_READ_TOOL= - Unified file reading

*** Privacy & Network
- =DISABLE_TELEMETRY= - Complete telemetry opt-out
- =CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC= - Minimal network mode
- =DISABLE_ERROR_REPORTING= - No crash reports
- =DISABLE_AUTOUPDATER= - No auto-updates
- =HTTP_PROXY= / =HTTPS_PROXY= - Proxy configuration

*** Developer & Debug
- =DEV=true= - Development mode
- =IS_DEMO= - Demo/presentation mode
- =CLAUBBIT=true= - Internal Anthropic testing
- =OTEL_LOG_USER_PROMPTS= - Log user input (privacy concern!)

** Boolean Processing
Most boolean variables use the =KJ()= function which accepts:
- "1", "true", "yes", "on" (case-insensitive)
- Returns false for any other value

** Timeout Variables
All timeout variables:
- Parsed with =parseInt(value, 10)=
- Validated for NaN and > 0
- Have built-in defaults
- Examples: =API_TIMEOUT_MS=, =BASH_DEFAULT_TIMEOUT_MS=, =MCP_TIMEOUT=

* WebSocket Protocol

See =claude-code-websocket-protocol.org= for detailed WebSocket/SSE communication protocol documentation.

* IDE Integration Protocol

See =claude-code-ide-protocol.org= for IDE integration details including VS Code extension communication.

* Architecture Overview

See =claude-code-architecture.org= for high-level system architecture including:
- Core components and modules
- Tool system implementation
- MCP (Model Context Protocol) integration
- Session management
- Configuration system

* Key Discoveries

1. **Lazy Caching**: The 5-minute cache uses lazy refresh, explaining immediate CLAUDE.md updates
2. **Spinner Randomness**: "Flibbertigibbeting" appears randomly with no context awareness
3. **Telemetry Respect**: Multiple ways to disable telemetry for privacy
4. **Cloud Flexibility**: Seamless switching between Anthropic/Bedrock/Vertex backends
5. **CLAUDE.md Hierarchy**: Three-level instruction system (local > project > user)