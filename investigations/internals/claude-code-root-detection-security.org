#+TITLE: Claude Code Root/Sudo Detection and Security Analysis
#+DATE: 2025-07-19

* Overview

This document analyzes how Claude Code detects root/sudo privileges and the security implications of its implementation.

* Root Detection Implementation

** Detection Code
Claude Code detects root privileges with this check:
#+begin_src javascript
if (B === "bypassPermissions") {
  if (
    process.platform !== "win32" &&
    typeof process.getuid === "function" &&
    process.getuid() === 0 &&
    !process.env.IS_SANDBOX
  )
    console.error("--dangerously-skip-permissions cannot be used with root/sudo privileges for security reasons"),
    process.exit(1);
}
#+end_src

** Detection Logic Breakdown
1. **Platform Check**: =process.platform !== "win32"=
   - Only checks on Unix-like systems (Linux, macOS)
   - Windows doesn't have UID concept

2. **Function Existence**: =typeof process.getuid === "function"=
   - Ensures getuid() is available
   - Safety check for non-standard Node.js environments

3. **Root Check**: =process.getuid() === 0=
   - UID 0 is root on Unix systems
   - This detects if Claude Code itself is running as root

4. **Sandbox Exception**: =!process.env.IS_SANDBOX=
   - Allows bypass if =IS_SANDBOX= environment variable is set
   - Intended for containerized/sandboxed environments

* Potential Workarounds

** 1. IS_SANDBOX Environment Variable
The most straightforward workaround:
#+begin_src bash
IS_SANDBOX=1 sudo claude --dangerously-skip-permissions
#+end_src

This bypasses the root check entirely. The code assumes that if you're in a sandbox environment, root privileges are less dangerous.

** 2. UID Manipulation
Since the check uses =process.getuid()=, potential workarounds include:
- Using =setuid= to temporarily change effective UID
- Running in a container with user namespace mapping
- Using =fakeroot= or similar tools

** 3. Not Running Claude as Root
The check only prevents Claude Code *itself* from running as root with bypass permissions. It doesn't prevent:
- Running Claude Code as normal user with passwordless sudo configured
- Using sudo within bash commands when Claude Code runs as normal user

** 4. Windows Platform
The root check is completely bypassed on Windows since:
- =process.platform === "win32"= skips the check
- Windows doesn't use Unix-style UIDs

* Security Analysis

** What the Check Prevents
- Running Claude Code as root with =--dangerously-skip-permissions=
- Accidental privilege escalation when Claude itself has root

** What the Check Doesn't Prevent
1. **Sudo in Commands**: Claude Code running as normal user can still execute:
   #+begin_src bash
   sudo rm -rf /
   #+end_src
   (Though it warns about sudo in hooks)

2. **Passwordless Sudo**: If configured, commands can use sudo without prompts

3. **Privilege Escalation**: Various methods to gain privileges after Claude starts

4. **Container Escapes**: If running in privileged containers

** Actual Security Model
The real security comes from:
1. **Permission Prompts**: User must approve dangerous operations
2. **Sandbox Mode**: Restricted execution for safe commands
3. **Server-Side Enforcement**: The backend enforces sandbox restrictions
4. **Settings Controls**: Admins can disable bypass mode entirely

* Bash Tool Security

** Sandbox Implementation
- =sandbox=true=: No network, no filesystem writes, automatic approval
- =sandbox=false=: Full access, requires user approval

** Command Execution Flow
1. Client formats command request
2. Sends via WebSocket to backend
3. Backend enforces sandbox restrictions
4. Results returned to client

** No Client-Side Restrictions
Important: The JavaScript client doesn't enforce security - it's all server-side:
- No client-side sudo blocking
- No client-side command filtering
- Security relies on backend implementation

* Recommendations

** For Users
1. **Don't run Claude Code as root** - Use normal user with sudo when needed
2. **Configure passwordless sudo carefully** - Only for specific safe commands
3. **Use sandbox mode** when possible for read-only operations
4. **Review commands** before approving in non-sandbox mode

** For Administrators
1. **Disable bypass mode** in settings if not needed:
   #+begin_src json
   {
     "permissions": {
       "disableBypassPermissionsMode": "disable"
     }
   }
   #+end_src

2. **Use policy settings** to enforce restrictions system-wide

3. **Container Security**: If using =IS_SANDBOX=, ensure container is properly restricted

** Security Best Practices
1. The root check is a basic safety net, not comprehensive security
2. Real security comes from the permission system and server-side enforcement
3. Bypass mode should only be used in truly isolated environments
4. Regular sudo within commands is often safer than running Claude as root

* Conclusion

The root detection in Claude Code is a simple safety check that prevents the most obvious misuse (running the entire application as root with bypassed permissions). However, it's not a comprehensive security boundary:

- Easy to bypass with =IS_SANDBOX=1=
- Doesn't prevent sudo usage in commands
- Relies on server-side enforcement for real security

The security model assumes:
1. Users will run Claude Code as a normal user
2. Permission prompts provide the main security boundary
3. Server-side sandbox enforcement handles restricted execution
4. Bypass mode is only for special isolated environments

For most users, the best approach is running Claude Code as a normal user and configuring sudo appropriately for specific commands that need elevation.