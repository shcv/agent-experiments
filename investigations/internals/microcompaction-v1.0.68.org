#+TITLE: Investigation: Microcompaction Feature in Claude Code v1.0.68
#+DATE: [2025-08-05]

* Executive Summary

The microcompaction feature in Claude Code v1.0.68 is an automatic context management system that removes old tool use blocks when the conversation context exceeds 92% of its capacity. The system selectively removes tool results from specific tools (Read, Bash, Grep, Glob, LS, WebSearch, WebFetch) while preserving the most recent 3 tool uses and maintaining the conversation structure.

* Investigation Methodology

** Search Strategy
- Searched for "microcompact" and related terms in the prettified v1.0.68 bundle
- Traced function call chains to understand the complete workflow
- Identified threshold constants and configuration values
- Analyzed the selection algorithm for tool removal

** Files Analyzed
- ~/home/shcv/src/claude-code/analysis/archive/pretty/pretty-v1.0.68.js~

* Key Findings

** Core Microcompaction Function
- *Location*: Lines 389834-389906 (function ~qf1~)
- *Purpose*: Main implementation of the microcompaction logic
- *Trigger Methods*: Can be triggered manually or automatically based on context usage

** Threshold Configuration

| Constant | Value | Purpose | Line |
|----------+-------+---------+------|
| ~UkB~ | 200,000 tokens | Base context limit | 389402 |
| ~Qz8~ | 40,000 tokens | Manual trigger threshold | 389404 |
| ~oH8~ | 0.92 (92%) | Auto-compact trigger percentage | 390089 |
| ~tH8~ | 0.80 (80%) | Warning threshold | 390090 |
| ~eH8~ | 0.80 (80%) | Error threshold | 390091 |
| ~Bz8~ | 20,000 tokens | Minimum tokens to save | 389405 |
| ~Zz8~ | 3 | Number of recent tools to preserve | 389403 |

** Eligible Tools for Compaction

#+BEGIN_SRC javascript
// Line 389406-389409
Gz8 = new Set([
  "Read", "Bash", "Grep", "Glob", "LS", "WebSearch", "WebFetch"
])
#+END_SRC

These are the only tools whose results can be removed during microcompaction.

** Selection Algorithm

*** Process Flow
1. Check if microcompaction is disabled via ~DISABLE_MICROCOMPACT~ environment variable
2. Scan all messages to identify tool_use and tool_result blocks
3. Calculate token usage for each tool result
4. Build list of compactable tools (excluding most recent 3)
5. Select tools for removal based on age and token savings
6. Replace tool_result content with placeholder text

*** Preservation Logic
- *Line 389854*: ~F = D.slice(-Zz8)~ - Preserves last 3 tool uses
- *Lines 389858-389861*: Selection loop for tools to remove
- Recent context is protected while older results are cleared

** Token Calculation
- Text estimation: ~Math.round(text.length / 4)~ 
- Image estimation: 2000 tokens per image (~Dz8 = 2000~)
- Simple character-based approximation for quick calculations

* Detailed Workflow

** Automatic Trigger Conditions
1. Context usage reaches 92% of capacity (~oH8 = 0.92~)
2. Auto-compact mode is enabled
3. Potential token savings exceed 20,000 tokens (~Bz8~)

** Manual Trigger Conditions
- Triggered via ~/compact~ command
- Uses fixed threshold of 40,000 tokens (~Qz8~)
- More aggressive than automatic trigger

** Removal Process
1. Identifies eligible tool_use/tool_result pairs
2. Calculates total potential token savings
3. Selects older tools for removal (preserving last 3)
4. Replaces content with ~"[Old tool result content cleared]"~
5. Maintains message structure and tool_use blocks
6. Tracks removed tools in ~pL0~ Set to prevent re-removal

** Telemetry and Logging
The system logs compaction events with:
- Number of tools compacted
- Token count before compaction
- Token count after compaction
- Trigger type (manual/auto)
- Timestamp of compaction

* Code References

** Main Functions
- ~qf1~ (389834-389906): Core microcompaction implementation
- ~JL0~ (390068-390111): Auto-compaction trigger logic
- ~pz8~ (389827-389832): Manual compaction command handler

** Configuration Constants
- Lines 389402-389409: Threshold and limit definitions
- Lines 390089-390091: Percentage-based triggers

** Tool Selection Logic
- Lines 389848-389852: Token calculation per tool
- Lines 389854-389861: Tool selection for removal
- Lines 389870-389875: Content replacement

* Important Observations

** Design Decisions
1. *Selective Preservation*: Only removes specific "read-heavy" tools
2. *Recent Context Priority*: Always preserves last 3 tool uses
3. *Non-Destructive*: Replaces content rather than removing blocks
4. *Token Efficiency*: Requires significant savings to trigger

** Edge Cases
- Tools not in the eligible set are never removed
- Edit, Write, and other modification tools are always preserved
- Compaction can be completely disabled for debugging
- Already compacted tools are tracked to avoid re-processing

** Performance Considerations
- Simple token estimation for speed (length/4)
- Set-based tracking for O(1) lookup of removed tools
- Single pass through messages for efficiency

* Comparison with Other Versions

This investigation focused specifically on v1.0.68. Future investigations could compare:
- Changes in threshold values across versions
- Evolution of eligible tools list
- Improvements to selection algorithm
- Introduction of new compaction strategies

* Conclusions

The microcompaction feature in v1.0.68 represents a sophisticated approach to context management:

1. *Intelligent Triggering*: Uses percentage-based thresholds (92%) rather than fixed limits
2. *Selective Removal*: Only removes results from information-gathering tools
3. *Recent Context Preservation*: Always keeps the last 3 tool uses
4. *Graceful Degradation*: Replaces content with placeholders rather than breaking structure
5. *Configurable Behavior*: Can be disabled or triggered manually as needed

The feature effectively extends usable conversation length by automatically cleaning up older, less relevant tool results while preserving the most recent and important context.

* References

- Source file: ~/home/shcv/src/claude-code/analysis/archive/pretty/pretty-v1.0.68.js~
- Main function: Lines 389834-389906
- Configuration: Lines 389402-389409
- Trigger logic: Lines 390089-390104